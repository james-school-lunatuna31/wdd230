name: Validate HTML and CSS

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  Validate-HTML:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: HTML Validation
      run: |
        docker run --rm -v $PWD:/workspace ghcr.io/validator/validator:latest /bin/bash -c "find /workspace -name '*.html' -exec vnu --errors-only --skip-non-html {} +"
    
    - name: Install w3c-css and dependencies
      run: npm install w3c-css async

    - name: CSS Validation
      run: |
        node -e "
        'use strict';
        const fs = require('fs');
        const path = require('path');
        const async = require('async');
        const validator = require('w3c-css');

        function findAllCSSFiles(dir, fileList = []) {
          const files = fs.readdirSync(dir);
          files.forEach(file => {
            const fullPath = path.join(dir, file);
            if (fs.statSync(fullPath).isDirectory()) {
              findAllCSSFiles(fullPath, fileList);
            } else if (fullPath.endsWith('.css')) {
              fileList.push(fullPath);
            }
          });
          return fileList;
        }

        const cssFiles = findAllCSSFiles('.');
        let hasErrors = false;

        async.eachSeries(cssFiles, function(file, next) {
          fs.readFile(file, 'utf8', function(err, cssContent) {
            if (err) {
              console.error('Error reading file:', file, err);
              hasErrors = true;
              return next(err);
            }

            validator.validate({ text: cssContent }, function(err, data) {
              if(err) {
                console.error('Failed to process:', file, err);
                hasErrors = true;
              } else {
                if (data.errors.length > 0) {
                  console.error('Validation errors in', file, data.errors);
                  hasErrors = true;
                }
                console.log('Validation warnings in', file, data.warnings);
              }
              setTimeout(() => next(null), 1500); // 1.5-second delay between requests
            });
          });
        }, function(err) {
          if (err || hasErrors) {
            console.error('Failed to process one or more CSS files.');
            process.exit(1);
          } else {
            console.log('All CSS files have been processed successfully');
          }
        });
        "
